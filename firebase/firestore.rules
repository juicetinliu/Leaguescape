rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin(gameId) {
      return get(/databases/$(database)/documents/games/$(gameId)).data.adminId == request.auth.uid;
    }
    
    function isActivePlayer(gameId) {
      // Non-banned player in the players collection
      return exists(/databases/$(database)/documents/games/$(gameId)/players/$(request.auth.uid)) &&
        !get(/databases/$(database)/documents/games/$(gameId)/players/$(request.auth.uid)).data.isBanned;
    }
    
    function hasAssumedCharacter(gameId) {
      // Check if player has assumed any character and is active
      return isActivePlayer(gameId) &&
        get(/databases/$(database)/documents/games/$(gameId)/players/$(request.auth.uid)).data.assumedCharacterId != '';
    }
    
    function hasAssumedThisCharacter(gameId, characterId) {
      // Check if player has assumed this specific character and is active
      return isActivePlayer(gameId) &&
        get(/databases/$(database)/documents/games/$(gameId)/players/$(request.auth.uid)).data.assumedCharacterId == characterId;
    }
    
    // User rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if request.auth.uid == userId;
    }
    
    // Game rules
    match /games/{gameId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAdmin(gameId);
      allow delete: if isAdmin(gameId);
      
      // Player rules
      match /players/{playerId} {
        allow read: if isAuthenticated() && (isAdmin(gameId) || isActivePlayer(gameId));
        allow create: if isAuthenticated() && request.auth.uid == playerId;
        allow update: if 
          // Admin can update all fields
          isAdmin(gameId) || 
          // Player can only update their own playername field
          (request.auth.uid == playerId && 
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['playername']) &&
           request.resource.data.isBanned == resource.data.isBanned &&
           request.resource.data.assumedCharacterId == resource.data.assumedCharacterId);
        allow delete: if isAdmin(gameId);
      }
      
      // Character rules
      match /characters/{characterId} {
        allow read: if isAdmin(gameId) || hasAssumedThisCharacter(gameId, characterId);
        allow create: if isAdmin(gameId);
        allow update: if isAdmin(gameId);  // Only admin can update character data
        allow delete: if isAdmin(gameId);
      }
      
      // Item rules
      match /items/{itemId} {
        allow read: if isAdmin(gameId) || hasAssumedCharacter(gameId);
        allow write: if isAdmin(gameId);
      }
      
      // Action rules
      match /actions/{actionId} {
        allow read: if isActivePlayer(gameId);
        allow create: if isActivePlayer(gameId);
        allow update: if isAdmin(gameId);
        allow delete: if false;
      }
    }
  }
}